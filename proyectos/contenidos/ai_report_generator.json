{
    "title": "GeneradorInformes: Creación automática de informes técnicos con IA",
    "author": "César Perales",
    "date": "29 de mayo, 2025",
    "skills": ["Python", "Flask", "React", "Inteligencia Artificial", "Procesamiento de documentos", "API REST"],
    "repoUrl": "https://github.com/CdeCasurpie/GeneradorInformes-Frontend.git",
    "demoUrl": "http://127.0.0.1:5000",
    "content": [
        {
            "type": "header",
            "level": 2,
            "content": "Descripción del Proyecto"
        },
        {
            "type": "text",
            "content": "GeneradorInformes es una aplicación web full-stack diseñada para simplificar y automatizar la creación de informes técnicos utilizando inteligencia artificial. El sistema permite a los usuarios cargar plantillas de documentos y archivos de conocimiento en formato PDF, analiza su estructura, y facilita la generación de informes personalizados con asistencia de IA para el análisis de imágenes y contenido."
        },
        {
            "type": "header",
            "level": 2,
            "content": "Backend (Flask)"
        },
        {
            "type": "text",
            "content": "El backend está desarrollado en Python utilizando el framework Flask, proporcionando una API RESTful para el procesamiento de documentos. Entre sus características principales encontramos:\n\n- Análisis de documentos PDF para extraer su estructura y contenido\n- Procesamiento y almacenamiento de imágenes en base64\n- Integración con servicios de IA para análisis de imágenes\n- Generación de documentos en formato Markdown a partir de plantillas\n- Sistema de autenticación y gestión de usuarios\n- Almacenamiento organizado de conocimiento por usuario"
        },
        {
            "type": "code",
            "language": "python",
            "content": "# Ejemplo de análisis de documentos en el backend\n@app.route('/api/v1/document/analyze', methods=['POST'])\n@login_required\ndef analyze_document():\n    \"\"\"\n    Analiza los archivos iniciales (plantilla y PDF de conocimiento)\n    \"\"\"\n    if 'template_file' not in request.files or 'knowledge_file' not in request.files:\n        return jsonify({'error': 'Faltan archivos requeridos'}), 400\n        \n    # Proceso de análisis de documentos\n    json_structure, markdown_template = analyze_pdf(str(template_path), str(knowledge_path))\n    \n    # Guardar resultados\n    with open(structure_path, 'w', encoding='utf-8') as f:\n        json.dump(json_structure, f, ensure_ascii=False, indent=2)"
        },
        {
            "type": "header",
            "level": 2,
            "content": "Frontend (React)"
        },
        {
            "type": "text",
            "content": "El frontend está construido con React y proporciona una interfaz de usuario moderna y responsiva que permite a los usuarios interactuar con todas las funcionalidades del sistema. Características destacadas:\n\n- Vista dual con panel de edición y previsualización en tiempo real\n- Editor de Markdown integrado para modificar informes\n- Soporte para carga de archivos PDF y visualización de resultados\n- Interfaz para chat asistido con IA para generar contenido\n- Exportación de informes a PDF\n- Sistema de autenticación y gestión de sesiones de usuario"
        },
        {
            "type": "code",
            "language": "jsx",
            "content": "// Componente principal de la aplicación React\nexport default function App() {\n  const [view, setView] = useState('Plantilla');\n  const [isEditorMode, setIsEditorMode] = useState(false);\n  const [markdown, setMarkdown] = useState('<div>...</div>');\n\n  // Navegación entre vistas\n  return (\n    <div className=\"main-container\">\n      <header>\n        <h1>GPT - Document generator</h1>\n        {/* ... Controles de navegación ... */}\n      </header>\n\n      <main className=\"flex relative\">\n        {/* Panel de edición y panel de previsualización */}\n        {/* ... */}\n      </main>\n    </div>\n  );\n}"
        },
        {
            "type": "header",
            "level": 2,
            "content": "Flujo de trabajo"
        },
        {
            "type": "text",
            "content": "El flujo de trabajo típico en el GeneradorInformes sigue estos pasos:\n\n1. El usuario carga una plantilla de informe y un documento de conocimiento en PDF\n2. El sistema analiza los documentos y extrae su estructura\n3. El usuario completa el formulario generado, incluyendo textos e imágenes\n4. El sistema analiza automáticamente las imágenes cargadas para sugerir descripciones\n5. Se genera un documento final en formato Markdown con todo el contenido procesado\n6. El usuario puede editar el resultado final y exportarlo como PDF"
        },
        {
            "type": "header",
            "level": 2,
            "content": "Tecnologías utilizadas"
        },
        {
            "type": "text",
            "content": "El proyecto integra una variedad de tecnologías modernas:\n\n- Backend: Python, Flask, SQLAlchemy, Base de datos SQLite\n- Frontend: React, JavaScript/JSX, CSS moderno\n- Procesamiento de documentos: Bibliotecas de análisis de PDF, procesamiento de imágenes\n- Inteligencia Artificial: Integración con servicios de IA para análisis de imágenes y documentos\n- Seguridad: Sistema de autenticación, gestión de sesiones, protección de rutas"
        },
        {
            "type": "header",
            "level": 2,
            "content": "Seguridad y gestión de usuarios"
        },
        {
            "type": "text",
            "content": "El sistema implementa un completo sistema de autenticación y autorización que permite:\n\n- Registro y autenticación de usuarios\n- Roles diferenciados (usuario normal y administrador)\n- Almacenamiento seguro de contraseñas\n- Protección de rutas mediante decoradores de autorización\n- Separación de recursos por usuario para garantizar privacidad"
        },
        {
            "type": "header",
            "level": 2,
            "content": "Conclusión"
        },
        {
            "type": "text",
            "content": "GeneradorInformes representa una solución innovadora para la creación de informes técnicos, combinando tecnologías web modernas con capacidades de inteligencia artificial. El sistema facilita significativamente el proceso de documentación técnica, ahorrando tiempo y recursos mientras mantiene un alto nivel de personalización y calidad en los informes generados. La arquitectura modular y bien estructurada permite futuras ampliaciones y mejoras, como la integración con más servicios de IA o la implementación de funciones colaborativas."
        }
    ]
}